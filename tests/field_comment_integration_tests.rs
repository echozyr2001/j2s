//! Integration tests for field-level comment generation
//!
//! This module tests the integration of the comment generation system with
//! the language generators to ensure field-level comments are properly generated.

use json2schema::codegen::generator::{CodeGenerator, GenerationOptions};
use json2schema::codegen::languages::go::GoGenerator;
use serde_json::json;

#[test]
fn test_go_field_comments_with_inference() {
    let generator = GoGenerator::new();
    let json_data = json!({
        "user_id": 12345,
        "name": "John Doe",
        "email": "john@example.com",
        "is_active": true,
        "created_at": "2023-12-25T10:30:00Z",
        "phone_number": "+1-555-0123",
        "address": "123 Main St",
        "profile_url": "https://example.com/profile",
        "login_count": 42,
        "account_status": "active",
        "user_type": "premium",
        "tags": ["developer", "rust", "go"]
    });
    
    let options = GenerationOptions::default()
        .with_struct_name("User")
        .with_comments(true);
    
    let result = generator.generate(&json_data, &options);
    assert!(result.is_ok());
    
    let code = result.unwrap();
    println!("Generated Go code:\n{}", code);
    
    // Verify file header comment
    assert!(code.contains("Code generated by j2s"));
    assert!(code.contains("DO NOT EDIT"));
    
    // Verify struct comment
    assert!(code.contains("// User represents the structure"));
    
    // Verify field comments with enhanced inference
    assert!(code.contains("// user_id (int64): Unique identifier for the user"));
    assert!(code.contains("// name (string): Name or title"));
    assert!(code.contains("// email (string): Email address"));
    assert!(code.contains("// is_active (bool): Boolean flag"));
    assert!(code.contains("// created_at (string): Date/time value"));
    assert!(code.contains("// phone_number (string): Phone number"));
    assert!(code.contains("// address (string): Address information"));
    assert!(code.contains("// profile_url (string): URL or link"));
    assert!(code.contains("// login_count (int64): Count or total value"));
    assert!(code.contains("// account_status (string): Status indicator"));
    assert!(code.contains("// user_type (string): Type classification"));
    assert!(code.contains("// tags ([]string): Array of tag items"));
    
    // Verify proper Go struct syntax
    assert!(code.contains("type User struct {"));
    assert!(code.contains("UserId int64 `json:\"user_id\"`"));
    assert!(code.contains("Name string `json:\"name\"`"));
    assert!(code.contains("Email string `json:\"email\"`"));
    assert!(code.contains("IsActive bool `json:\"is_active\"`"));
    assert!(code.contains("Tags []string `json:\"tags\"`"));
}

#[test]
fn test_go_nested_struct_comments() {
    let generator = GoGenerator::new();
    let json_data = json!({
        "user_id": 12345,
        "profile": {
            "first_name": "John",
            "last_name": "Doe",
            "birth_date": "1990-01-01",
            "is_verified": true
        },
        "settings": {
            "theme": "dark",
            "notifications_enabled": true,
            "language": "en"
        }
    });
    
    let options = GenerationOptions::default()
        .with_struct_name("User")
        .with_comments(true);
    
    let result = generator.generate(&json_data, &options);
    assert!(result.is_ok());
    
    let code = result.unwrap();
    println!("Generated Go code with nested structs:\n{}", code);
    
    // Verify nested struct comments
    assert!(code.contains("// Profile represents the structure"));
    assert!(code.contains("// Settings represents the structure"));
    
    // Verify nested field comments
    assert!(code.contains("// first_name (string): Name or title"));
    assert!(code.contains("// last_name (string): Name or title"));
    assert!(code.contains("// birth_date (string): Date/time value"));
    assert!(code.contains("// is_verified (bool): Boolean flag"));
    assert!(code.contains("// notifications_enabled (bool): Boolean flag"));
}

#[test]
fn test_go_optional_field_comments() {
    let generator = GoGenerator::new();
    let json_data = json!({
        "user_id": 12345,
        "name": "John Doe",
        "email": null,
        "phone": null,
        "is_active": true
    });
    
    let options = GenerationOptions::default()
        .with_struct_name("User")
        .with_comments(true)
        .with_optional_fields(true);
    
    let result = generator.generate(&json_data, &options);
    assert!(result.is_ok());
    
    let code = result.unwrap();
    println!("Generated Go code with optional fields:\n{}", code);
    
    // Verify optional field comments and types
    assert!(code.contains("// email (*string): Email address"));
    assert!(code.contains("// phone (*string): Phone number"));
    assert!(code.contains("Email *string `json:\"email,omitempty\"`"));
    assert!(code.contains("Phone *string `json:\"phone,omitempty\"`"));
    
    // Verify non-optional fields
    assert!(code.contains("// user_id (int64): Unique identifier for the user"));
    assert!(code.contains("// name (string): Name or title"));
    assert!(code.contains("// is_active (bool): Boolean flag"));
}

#[test]
fn test_go_array_field_comments() {
    let generator = GoGenerator::new();
    let json_data = json!({
        "categories": ["tech", "programming"],
        "scores": [95, 87, 92],
        "is_flags": [true, false, true],
        "user_ids": [1, 2, 3, 4, 5]
    });
    
    let options = GenerationOptions::default()
        .with_struct_name("Data")
        .with_comments(true);
    
    let result = generator.generate(&json_data, &options);
    assert!(result.is_ok());
    
    let code = result.unwrap();
    println!("Generated Go code with arrays:\n{}", code);
    
    // Verify array field comments
    assert!(code.contains("// categories ([]string): Array of category items"));
    assert!(code.contains("// scores ([]int64): Array of score items"));
    assert!(code.contains("// is_flags ([]bool): Array of is_flag items"));
    assert!(code.contains("// user_ids ([]int64): Array of user_id items"));
    
    // Verify array types
    assert!(code.contains("Categories []string `json:\"categories\"`"));
    assert!(code.contains("Scores []int64 `json:\"scores\"`"));
    assert!(code.contains("IsFlags []bool `json:\"is_flags\"`"));
    assert!(code.contains("UserIds []int64 `json:\"user_ids\"`"));
}

#[test]
fn test_go_special_field_patterns() {
    let generator = GoGenerator::new();
    let json_data = json!({
        "api_endpoint": "https://api.example.com",
        "has_permission": true,
        "can_edit": false,
        "should_notify": true,
        "description": "User account description",
        "version": "1.2.3",
        "enabled": true,
        "mobile_phone": "+1-555-0123",
        "home_address": "123 Main St",
        "created_timestamp": "2023-12-25T10:30:00Z",
        "item_count": 42
    });
    
    let options = GenerationOptions::default()
        .with_struct_name("Config")
        .with_comments(true);
    
    let result = generator.generate(&json_data, &options);
    assert!(result.is_ok());
    
    let code = result.unwrap();
    println!("Generated Go code with special patterns:\n{}", code);
    
    // Verify enhanced pattern matching
    assert!(code.contains("// api_endpoint (string): URL or link"));
    assert!(code.contains("// has_permission (bool): Boolean flag"));
    assert!(code.contains("// can_edit (bool): Boolean flag"));
    assert!(code.contains("// should_notify (bool): Boolean flag"));
    assert!(code.contains("// description (string): Description text"));
    assert!(code.contains("// version (string): Version information"));
    assert!(code.contains("// enabled (bool): Boolean flag"));
    assert!(code.contains("// mobile_phone (string): Phone number"));
    assert!(code.contains("// home_address (string): Address information"));
    assert!(code.contains("// created_timestamp (string): Date/time value"));
    assert!(code.contains("// item_count (int64): Count or total value"));
}

#[test]
fn test_go_comments_disabled() {
    let generator = GoGenerator::new();
    let json_data = json!({
        "user_id": 12345,
        "name": "John Doe",
        "email": "john@example.com"
    });
    
    let options = GenerationOptions::default()
        .with_struct_name("User")
        .with_comments(false);
    
    let result = generator.generate(&json_data, &options);
    assert!(result.is_ok());
    
    let code = result.unwrap();
    println!("Generated Go code without comments:\n{}", code);
    
    // Verify no comments are generated when disabled
    assert!(!code.contains("Code generated by j2s"));
    assert!(!code.contains("// user_id"));
    assert!(!code.contains("// name"));
    assert!(!code.contains("// email"));
    assert!(!code.contains("// User represents"));
    
    // But struct definition should still be present
    assert!(code.contains("type User struct {"));
    assert!(code.contains("UserId int64 `json:\"user_id\"`"));
    assert!(code.contains("Name string `json:\"name\"`"));
    assert!(code.contains("Email string `json:\"email\"`"));
}